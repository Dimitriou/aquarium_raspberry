# base-image for node on any machine using a template variable,
# see more about dockerfile templates here: http://docs.resin.io/deployment/docker-templates/
# and about resin base images here: http://docs.resin.io/runtime/resin-base-images/
# Note the node:slim image doesn't have node-gyp
FROM resin/%%RESIN_MACHINE_NAME%%-node:latest

# use apt-get if you need to install dependencies,
# for instance if you need ALSA sound utils, just uncomment the lines below.
#RUN apt-get update && apt-get install -yq \
#    alsa-utils libasound2-dev && \
#    apt-get clean && rm -rf /var/lib/apt/lists/*



################ Pi Blaster #################
# Install pi-blaster
#RUN systemctl enable pi-blaster

# Install from local files (second option)
#RUN cd app/pi-blaster && ./pi-blaster 17 && echo "0=0.1" > /dev/pi-blaster
#RUN cd ..

# (Third option)
#RUN cd pi-blaster
#RUN make install
#RUN cd ..

# Option of servo repo
#FROM resin/rpi-node:latest


# Defines our working directory in container
WORKDIR /usr/src/app

RUN apt-get install -y build-essential

# ADD . /app

RUN cd /pi-blaster && make pi-blaster

# CMD ["bash", "/app/start.sh"]
#############################################





# Defines our working directory in container
# WORKDIR /usr/src/app

# Copies the package.json first for better cache on later pushes
COPY package.json package.json

# This install npm dependencies on the resin.io build server,
# making sure to clean up the artifacts it creates in order to reduce the image size.
# RUN JOBS=MAX npm install --production --unsafe-perm && npm cache clean && rm -rf /tmp/*
RUN npm install --force

# This will copy all files in our root to the working  directory in the container
COPY . ./

# Enable systemd init system in container
ENV INITSYSTEM on

# server.js will run when container starts up on the device
# CMD [ "bash", "/app/start.sh", ";", "npm", "start"]
CMD ["npm", "start"]
# CMD ["bash", "/app/start.sh"]
